//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace seems.Misc {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SpectrumDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SpectrumDataSet : global::System.Data.DataSet {
        
        private SpectrumTableDataTable tableSpectrumTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SpectrumDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SpectrumDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SpectrumTable"] != null)) {
                    base.Tables.Add(new SpectrumTableDataTable(ds.Tables["SpectrumTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpectrumTableDataTable SpectrumTable {
            get {
                return this.tableSpectrumTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SpectrumDataSet cln = ((SpectrumDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SpectrumTable"] != null)) {
                    base.Tables.Add(new SpectrumTableDataTable(ds.Tables["SpectrumTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSpectrumTable = ((SpectrumTableDataTable)(base.Tables["SpectrumTable"]));
            if ((initTable == true)) {
                if ((this.tableSpectrumTable != null)) {
                    this.tableSpectrumTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SpectrumDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SpectrumDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSpectrumTable = new SpectrumTableDataTable();
            base.Tables.Add(this.tableSpectrumTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpectrumTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SpectrumDataSet ds = new SpectrumDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SpectrumTableRowChangeEventHandler(object sender, SpectrumTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpectrumTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnIndex;
            
            private global::System.Data.DataColumn columnSpotId;
            
            private global::System.Data.DataColumn columnSpectrumType;
            
            private global::System.Data.DataColumn columnMsLevel;
            
            private global::System.Data.DataColumn columnScanTime;
            
            private global::System.Data.DataColumn columnDataPoints;
            
            private global::System.Data.DataColumn columnBasePeakMz;
            
            private global::System.Data.DataColumn columnBasePeakIntensity;
            
            private global::System.Data.DataColumn columnTotalIonCurrent;
            
            private global::System.Data.DataColumn columnIcId;
            
            private global::System.Data.DataColumn columnDpId;
            
            private global::System.Data.DataColumn columnPrecursorInfo;
            
            private global::System.Data.DataColumn columnScanInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableDataTable() {
                this.TableName = "SpectrumTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpectrumTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpectrumTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpotIdColumn {
                get {
                    return this.columnSpotId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpectrumTypeColumn {
                get {
                    return this.columnSpectrumType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MsLevelColumn {
                get {
                    return this.columnMsLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanTimeColumn {
                get {
                    return this.columnScanTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataPointsColumn {
                get {
                    return this.columnDataPoints;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasePeakMzColumn {
                get {
                    return this.columnBasePeakMz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasePeakIntensityColumn {
                get {
                    return this.columnBasePeakIntensity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalIonCurrentColumn {
                get {
                    return this.columnTotalIonCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IcIdColumn {
                get {
                    return this.columnIcId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DpIdColumn {
                get {
                    return this.columnDpId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrecursorInfoColumn {
                get {
                    return this.columnPrecursorInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScanInfoColumn {
                get {
                    return this.columnScanInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRow this[int index] {
                get {
                    return ((SpectrumTableRow)(this.Rows[index]));
                }
            }
            
            public event SpectrumTableRowChangeEventHandler SpectrumTableRowChanging;
            
            public event SpectrumTableRowChangeEventHandler SpectrumTableRowChanged;
            
            public event SpectrumTableRowChangeEventHandler SpectrumTableRowDeleting;
            
            public event SpectrumTableRowChangeEventHandler SpectrumTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpectrumTableRow(SpectrumTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRow AddSpectrumTableRow(string Id, int Index, string SpotId, string SpectrumType, int MsLevel, double ScanTime, ulong DataPoints, double BasePeakMz, double BasePeakIntensity, double TotalIonCurrent, string IcId, string DpId, string PrecursorInfo, string ScanInfo) {
                SpectrumTableRow rowSpectrumTableRow = ((SpectrumTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        Index,
                        SpotId,
                        SpectrumType,
                        MsLevel,
                        ScanTime,
                        DataPoints,
                        BasePeakMz,
                        BasePeakIntensity,
                        TotalIonCurrent,
                        IcId,
                        DpId,
                        PrecursorInfo,
                        ScanInfo};
                rowSpectrumTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpectrumTableRow);
                return rowSpectrumTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRow FindByIndex(int Index) {
                return ((SpectrumTableRow)(this.Rows.Find(new object[] {
                            Index})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpectrumTableDataTable cln = ((SpectrumTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpectrumTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnIndex = base.Columns["Index"];
                this.columnSpotId = base.Columns["SpotId"];
                this.columnSpectrumType = base.Columns["SpectrumType"];
                this.columnMsLevel = base.Columns["MsLevel"];
                this.columnScanTime = base.Columns["ScanTime"];
                this.columnDataPoints = base.Columns["DataPoints"];
                this.columnBasePeakMz = base.Columns["BasePeakMz"];
                this.columnBasePeakIntensity = base.Columns["BasePeakIntensity"];
                this.columnTotalIonCurrent = base.Columns["TotalIonCurrent"];
                this.columnIcId = base.Columns["IcId"];
                this.columnDpId = base.Columns["DpId"];
                this.columnPrecursorInfo = base.Columns["PrecursorInfo"];
                this.columnScanInfo = base.Columns["ScanInfo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnIndex = new global::System.Data.DataColumn("Index", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIndex);
                this.columnSpotId = new global::System.Data.DataColumn("SpotId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpotId);
                this.columnSpectrumType = new global::System.Data.DataColumn("SpectrumType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpectrumType);
                this.columnMsLevel = new global::System.Data.DataColumn("MsLevel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMsLevel);
                this.columnScanTime = new global::System.Data.DataColumn("ScanTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanTime);
                this.columnDataPoints = new global::System.Data.DataColumn("DataPoints", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataPoints);
                this.columnBasePeakMz = new global::System.Data.DataColumn("BasePeakMz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePeakMz);
                this.columnBasePeakIntensity = new global::System.Data.DataColumn("BasePeakIntensity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasePeakIntensity);
                this.columnTotalIonCurrent = new global::System.Data.DataColumn("TotalIonCurrent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalIonCurrent);
                this.columnIcId = new global::System.Data.DataColumn("IcId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcId);
                this.columnDpId = new global::System.Data.DataColumn("DpId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDpId);
                this.columnPrecursorInfo = new global::System.Data.DataColumn("PrecursorInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrecursorInfo);
                this.columnScanInfo = new global::System.Data.DataColumn("ScanInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScanInfo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIndex}, true));
                this.columnId.AllowDBNull = false;
                this.columnIndex.AllowDBNull = false;
                this.columnIndex.Unique = true;
                this.columnSpotId.Caption = "Spot Id";
                this.columnSpectrumType.Caption = "Spectrum Type";
                this.columnMsLevel.Caption = "MS Level";
                this.columnScanTime.Caption = "Scan Time";
                this.columnDataPoints.Caption = "Data Points";
                this.columnBasePeakMz.Caption = "Base Peak m/z";
                this.columnBasePeakIntensity.Caption = "Base Peak Intensity";
                this.columnTotalIonCurrent.Caption = "Total Ion Current";
                this.columnIcId.Caption = "IC Id";
                this.columnDpId.Caption = "DP Id";
                this.columnPrecursorInfo.Caption = "Precursor Info";
                this.columnScanInfo.Caption = "Scan Info";
                this.CaseSensitive = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRow NewSpectrumTableRow() {
                return ((SpectrumTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpectrumTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpectrumTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpectrumTableRowChanged != null)) {
                    this.SpectrumTableRowChanged(this, new SpectrumTableRowChangeEvent(((SpectrumTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpectrumTableRowChanging != null)) {
                    this.SpectrumTableRowChanging(this, new SpectrumTableRowChangeEvent(((SpectrumTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpectrumTableRowDeleted != null)) {
                    this.SpectrumTableRowDeleted(this, new SpectrumTableRowChangeEvent(((SpectrumTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpectrumTableRowDeleting != null)) {
                    this.SpectrumTableRowDeleting(this, new SpectrumTableRowChangeEvent(((SpectrumTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpectrumTableRow(SpectrumTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SpectrumDataSet ds = new SpectrumDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpectrumTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpectrumTableRow : global::System.Data.DataRow {
            
            private SpectrumTableDataTable tableSpectrumTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpectrumTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpectrumTable = ((SpectrumTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Id {
                get {
                    return ((string)(this[this.tableSpectrumTable.IdColumn]));
                }
                set {
                    this[this.tableSpectrumTable.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Index {
                get {
                    return ((int)(this[this.tableSpectrumTable.IndexColumn]));
                }
                set {
                    this[this.tableSpectrumTable.IndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpotId {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.SpotIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpotId\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.SpotIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SpectrumType {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.SpectrumTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpectrumType\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.SpectrumTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MsLevel {
                get {
                    try {
                        return ((int)(this[this.tableSpectrumTable.MsLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MsLevel\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.MsLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ScanTime {
                get {
                    try {
                        return ((double)(this[this.tableSpectrumTable.ScanTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanTime\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.ScanTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong DataPoints {
                get {
                    try {
                        return ((ulong)(this[this.tableSpectrumTable.DataPointsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataPoints\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.DataPointsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BasePeakMz {
                get {
                    try {
                        return ((double)(this[this.tableSpectrumTable.BasePeakMzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasePeakMz\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.BasePeakMzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BasePeakIntensity {
                get {
                    try {
                        return ((double)(this[this.tableSpectrumTable.BasePeakIntensityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BasePeakIntensity\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.BasePeakIntensityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalIonCurrent {
                get {
                    try {
                        return ((double)(this[this.tableSpectrumTable.TotalIonCurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalIonCurrent\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.TotalIonCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IcId {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.IcIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IcId\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.IcIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DpId {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.DpIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DpId\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.DpIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrecursorInfo {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.PrecursorInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrecursorInfo\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.PrecursorInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScanInfo {
                get {
                    try {
                        return ((string)(this[this.tableSpectrumTable.ScanInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScanInfo\' in table \'SpectrumTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSpectrumTable.ScanInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpotIdNull() {
                return this.IsNull(this.tableSpectrumTable.SpotIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpotIdNull() {
                this[this.tableSpectrumTable.SpotIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpectrumTypeNull() {
                return this.IsNull(this.tableSpectrumTable.SpectrumTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpectrumTypeNull() {
                this[this.tableSpectrumTable.SpectrumTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMsLevelNull() {
                return this.IsNull(this.tableSpectrumTable.MsLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMsLevelNull() {
                this[this.tableSpectrumTable.MsLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanTimeNull() {
                return this.IsNull(this.tableSpectrumTable.ScanTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanTimeNull() {
                this[this.tableSpectrumTable.ScanTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataPointsNull() {
                return this.IsNull(this.tableSpectrumTable.DataPointsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataPointsNull() {
                this[this.tableSpectrumTable.DataPointsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePeakMzNull() {
                return this.IsNull(this.tableSpectrumTable.BasePeakMzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePeakMzNull() {
                this[this.tableSpectrumTable.BasePeakMzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePeakIntensityNull() {
                return this.IsNull(this.tableSpectrumTable.BasePeakIntensityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePeakIntensityNull() {
                this[this.tableSpectrumTable.BasePeakIntensityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalIonCurrentNull() {
                return this.IsNull(this.tableSpectrumTable.TotalIonCurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalIonCurrentNull() {
                this[this.tableSpectrumTable.TotalIonCurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIcIdNull() {
                return this.IsNull(this.tableSpectrumTable.IcIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIcIdNull() {
                this[this.tableSpectrumTable.IcIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDpIdNull() {
                return this.IsNull(this.tableSpectrumTable.DpIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDpIdNull() {
                this[this.tableSpectrumTable.DpIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrecursorInfoNull() {
                return this.IsNull(this.tableSpectrumTable.PrecursorInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrecursorInfoNull() {
                this[this.tableSpectrumTable.PrecursorInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScanInfoNull() {
                return this.IsNull(this.tableSpectrumTable.ScanInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScanInfoNull() {
                this[this.tableSpectrumTable.ScanInfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpectrumTableRowChangeEvent : global::System.EventArgs {
            
            private SpectrumTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRowChangeEvent(SpectrumTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpectrumTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591